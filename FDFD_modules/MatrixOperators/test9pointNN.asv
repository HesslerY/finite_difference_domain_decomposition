%% derivative operators with dirichlet boundary conditions
close all;
clear; 

Nx = 10; 
Ny = 10; 
Nz = 10;
N = [Nx, Ny, Nz]; dx = 0.01; dy = dx; dz = dx;
dL = [dx dy, dz];

Nx = 10; 
Ny = 10; 
N = [Nx, Ny]; dx = 0.01; dy = dx; dz = dx;
dL = [dx dy];
%% Solver Code Begins Here
w = 'x'; s = 'b';
%w = 'x', 'y', or 'z'
%s = 'b' or 'w'
% dL: [dx dy dz] for 3D; [dx dy] for 2D
% N: [Nx Ny Nz] for 3D; [Nx Ny] for 2D

dw = dL('xyz' == w);  % one of dx, dy, dz, all are numbers...no info about which one was selected
sign = diff('bf' == s);  % +1 for s=='f'; -1 for s=='b'
M = prod(N);  % total number of cells in domain
%take advantage of linear indexing
dw = dL('xyz' == w);  % one of dx, dy, dz, all are numbers...no info about which one was selected
sign = diff('bf' == s);  % +1 for s=='f'; -1 for s=='b'
M = prod(N);  % total number of cells in domain
%take advantage of linear indexing

ind_cur = 1:M;  % indices of current points
ind_cur = ind_cur(:);

ind_adj_x = 1:M;  % indices of adjacent (previous or next) points in the w-direction
ind_adj_x = reshape(ind_adj_x, N);
ind_adj_y = ind_adj_x

%% shift the row indices
shift = 'xyz' == w;
ind_adj_r0x = circshift(ind_adj_x, -sign * ('xyz' == w));
ind_adj_l0x = circshift(ind_adj_x, sign * ('xyz' == w));
ind_adj_rtx = circshift(ind_adj_x, sign * [shift, shift]);
ind_adj_rbx = circshift(ind_adj_x, sign * [shift, -shift]);
ind_adj_ltx = circshift(ind_adj_x, sign * [-shift, shift]);
ind_adj_lbx = circshift(ind_adj_x, sign * [-shift, -shift]);

ind_adj_r0x = ind_adj_r0x(:);
ind_adj_l0x = ind_adj_l0x(:);
ind_adj_rtx = ind_adj_r0x(:);
ind_adj_ltx = ind_adj_l0x(:);
ind_adj_rbx = ind_adj_r0x(:);
ind_adj_lbx = ind_adj_l0x(:);

%% conver the offdiagonals into a linear index
linear_ind_r0x = sub2ind([M M], ind_cur, ind_adj_r0x); 
linear_ind_l0x = sub2ind([M M], ind_cur, ind_adj_l0x); 
linear_ind_rtx = sub2ind([M M], ind_cur, ind_adj_r0x); 
linear_ind_ltx = sub2ind([M M], ind_cur, ind_adj_l0x); 
linear_ind_rbx = sub2ind([M M], ind_cur, ind_adj_r0x); 
linear_ind_lbx = sub2ind([M M], ind_cur, ind_adj_l0x); 
linear_ind_r0x = sub2ind([M M], ind_cur, ind_adj_r0x); 
linear_ind_l0x = sub2ind([M M], ind_cur, ind_adj_l0x); 

Dws = -sign*speye(M); %M fully determines the matricial size;
Dws(linear_ind_r0x) = sign;
Dws(linear_ind_l0x) = sign;
Dws = (1/dw)*Dws;

